
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 15
VisualStudioVersion = 15.0.27428.2027
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AdaptiveCard", "AdaptiveCard\AdaptiveCard.csproj", "{6C0A78CE-08BC-486E-943C-1EA7D9F6E0BB}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{6C0A78CE-08BC-486E-943C-1EA7D9F6E0BB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6C0A78CE-08BC-486E-943C-1EA7D9F6E0BB}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6C0A78CE-08BC-486E-943C-1EA7D9F6E0BB}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6C0A78CE-08BC-486E-943C-1EA7D9F6E0BB}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {49CBCB41-8182-454B-8C0F-9049B8722F66}
	EndGlobalSection
EndGlobal







public static string CLIENTSECRET = ConfigurationManager.AppSettings["vaultClientSecret"];
        public static string CLIENTID = ConfigurationManager.AppSettings["vaultClientId"];
        public static string BASESECRETURI = ConfigurationManager.AppSettings["vaultBaseSecretUri"];
        static string SECRETNAME = ConfigurationManager.AppSettings["vaultAPIKeyName"];
        static KeyVaultClient kvc = null;
        //static string yourApiKey = "blabla";

        string keyFromVault = GetKeyFromVault(SECRETNAME);
        public static async Task<string> GetToken(string authority, string resource, string scope)
        {
            var authContext = new AuthenticationContext(authority);
            ClientCredential clientCred = new ClientCredential(CLIENTID, CLIENTSECRET);
            AuthenticationResult result = await authContext.AcquireTokenAsync(resource, clientCred);
            if (result == null)
                throw new InvalidOperationException("Failed to obtain the JWT token");
            return result.AccessToken;
        }
        public static string GetKeyFromVault(string secretName)
        {
            const SslProtocols _Tls12 = (SslProtocols)0x00000C00;
            const SecurityProtocolType Tls12 = (SecurityProtocolType)_Tls12;
            ServicePointManager.SecurityProtocol = Tls12;

            kvc = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(GetToken));

            SecretBundle secret = Task.Run(() => kvc.GetSecretAsync(BASESECRETURI +
                @"/secrets/" + secretName)).ConfigureAwait(false).GetAwaiter().GetResult();

            return secret.Value;
        }
